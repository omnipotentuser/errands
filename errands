#!/usr/bin/env node

var argv = require('yargs')
  .usage('Usage: $0 [-haqf] [command1,...]')
  .example('$0 "killall top" "ps aux"', 'runs "killall top" then ps in a sequential order')
  .describe('q','Quiet. Silently runs commands without returning result')
  .describe('a','Asynchronous mode. Executes all commands concurrently.')
  .describe('f','Fail. Stop on fail. Synchronous only.')
  .alias('h','help')
  .alias('h','?')
  .argv
;

var exec = require('child_process').exec,
    child;

var nl = '\n';

function print(command, stdout, stderr, err){
  if (typeof(argv.q) === 'undefined'){
    if (command){
      console.log('"'+command+'"');
    }
    if (stdout){
      console.log(stdout);
    }
    if (stderr){
      console.log(nl,'stderr >',stderr);
      if (err && (err === stderr)){
        process.exit(1);
      }
    }
    if (err !== null){
      console.log('\texec error:', err.code, err.signal);
    }
  }
};

function next(cmd){
  child = exec( cmd, function(err, stdout, stderr){
    (function(command){
      print(command, stdout, stderr, err);
      if (argv._.length > 0){
        if (argv.f && (stderr !== null || err !== null)){
          process.exit(1);
        }
        var cmd = argv._.shift();
        next(cmd);
      }
    })(cmd);
  });
};

if ((argv.h) || argv._.length === 0){
  var menu = 'Help Menu\n';
  var help = '\t-h help - prints help screen.\n';
  var async = '\t-a asynchronous mode - executes all commands concurrently.\n';
  var quiet = '\t-q quiet - do not print output.\n';
  var fail = '\t-f fail - stop on fail. synchronous operation only.\n';
  console.log(nl, nl, menu, nl, help, async, quiet, fail, nl);
  return;
}

if (argv.a){
  var _ = argv._;
  _.forEach( function(value, index, arr){
    //console.log('\nindex:',index,'value:',value);
    child = exec(value, function( err, stdout, stderr ){
      print(value, stdout, stderr, err);
    });
  });
} else {
  if (argv._.length > 0){
    var cmd = argv._.shift();
    next(cmd);
  }
}

console.log(nl);
