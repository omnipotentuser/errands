#!/usr/bin/env node


var child;
var exec = require('child_process').exec;
var argv = require('yargs')
  .usage('Usage: $0 [-haqf] [command1,...]')
  .example('$0 "killall top" "ps aux"', 'runs "killall top" then ps in a sequential order')
  .describe('q','Quiet. Silently runs commands without returning result')
  .describe('a','Asynchronous mode. Executes all commands concurrently.')
  .describe('f','Fail. Stop on fail. Synchronous only.')
  .alias('h','help')
  .alias('h','?')
  .boolean(['f','h','q','a'])
  .argv
;

//console.dir([argv.f, argv.h, argv.q, argv.a]);
//console.dir(argv._);

var nl = '\n';

// params carries 4 values
// 0 = err
// 1 = output
// 2 = stderr
// 3 = name of command
function print(params){
  if (argv.q === false){
    if (params[3]){
      console.log('"'+params[3]+'"');
    }
    if (params[1]){
      console.log(params[1]);
    }
    if (params[2]){
      console.log('stderr >',params[2]);
    }
    if (params[0] !== null){
      console.dir(['exec error:', params[0].code, params[0].signal]);
    }
    if (argv.f  && (params[0] || params[2])){
      console.log('stderr >',params[2]);
      console.log(params[3],'failed!');
      process.exit(1);
    }
  }
};
function next(cmd){
  child = exec(cmd, function(err, stdout, stderr){
    var params = [err, stdout, stderr, cmd];
    (function(p){
      print(p);
      if (argv._.length > 0){
        var cmd = argv._.shift();
        next(cmd);
      }
    })(params);
  });
};
if ((argv.h) || argv._.length === 0){
  var menu = 'Help Menu\n';
  var help = '\t-h help - prints help screen.\n';
  var async = '\t-a asynchronous mode - executes all commands concurrently.\n';
  var quiet = '\t-q quiet - do not print output.\n';
  var fail = '\t-f fail - stop on fail. synchronous operation only.\n';
  console.log(nl, nl, menu, nl, help, async, quiet, fail, nl);
  process.exit(2); 
}
if (argv.a){
  var _ = argv._;
  _.forEach( function(value, index, arr){
    //console.log('\nindex:',index,'value:',value);
    child = exec(value, function( err, stdout, stderr ){
      print([err, stdout, stderr, value]);
    });
  });
} else {
  if (argv._.length > 0){
    var cmd = argv._.shift();
    next(cmd);
  }
}
console.log(nl);
